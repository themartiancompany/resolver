#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_host=""
  network_bandwidth=""
  network_access=""
  target_network=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "hotspot-resolver"
}


_resolver() {
  local \
    _command="${1}" \
    _host="${2}" \
    _bandwidth="${3}" \
    _access="${4}" \
    _network="${5}" \
    _resolver \
    _args=() \
    _resolver_opts=()
  if [[ "${quiet}" == "n" ]]; then
    _resolver_opts+=(
      -v
    )
  fi
  if [[ "${_access}" == "local" ]]; then
    _resolver="hotspot"
  fi
  if [[ "${_network}" == "wifi" ]]; then
    _resolver="hotspot"
    _resolver_opts+=(
      -d
        'wlan0'
    )
  elif \
    (( \
      [[ "${_network}" == "bluetooth" ]] || \
      [[ "${_bandwidth}" == "low" ]] \
    )); then
    _resolver="hotspot"
    _resolver_opts+=(
      -d
        'bt-pan'
    )
  elif [[ "${_network}" == "tor" ]]; then
    _resolver="tor"
  fi
  "${_resolver}-resolver" \
    "${_resolver_opts[@]}" \
    "${_command}" \
    "${_host}"
}

_make_conf() {
  local \
    _conf="${1}" \
    _host="${2}" \
    _device="${3}" \
    _address="${4}" \
    _new="${5}"
  mkdir \
    -p \
    "$(dirname \
         "${_conf}")"
  if [[ "${_new}" == true ]]; then
    echo \
      "# values go from 2 to 254" >> \
      "${_conf}"
    echo \
      "# device=111" >> \
      "${_conf}"
  fi
  if [[ "${_host}" == "" ]]; then
    _host="$(_hostname_detect)"
  fi
  if [[ "${_host}" == "" ]]; then
    _input \
    "_host" \
    "enter name for this host"
  fi
  [[ "${_address}" == "" ]] && \
  [[ "${_new}" != "true" ]] && \
    _input \
    "_address" \
    "enter address for target host (empty for self)"
  [[ "${_address}" == "" ]] && \
  _address="$( \
    _get_device_address \
      "${_device}")"
  echo \
    "${_host}=${_address##*.}" >> \
    "${_conf}"
}

_check_conf_permissions() {
  local \
    _conf="${1}" \
    _perm
  _perm="$( \
    stat \
      -c '%a' \
      "${_conf}")"
  if [[ "${_perm}" != "600" ]]; then
    chmod \
      600 \
      "${_conf}"
  fi
}

_get_conf() {
  local \
    _host="${1}" \
    _device="${2}" \
    _conf \
    _cfg \
    _msg=()
  _conf="$(_get_conf_path)"
  if [ ! -e  "${_conf}" ]; then
    _make_conf \
      "${_conf}" \
      "${_host}" \
      "${_device}" \
      "" \
      "true"
  fi
  _check_conf_permissions \
    "${_conf}"
  _is_conf_empty \
    "${_conf}"
  _cfg="$( \
    _read_setting \
      "${_conf}" \
      "${_host}")"
  if [[ "${_cfg}" == "" ]]; then
    _msg_error \
      "No address configured for ${_host}" \
      1
    _make_conf \
      "${_conf}" \
      "${_host}" \
      "${_device}" \
      "" \
      "false"
    _cfg="$( \
      _read_setting \
        "${_conf}" \
        "${_host}")"
  fi
  echo \
    "${_cfg}"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "target" \
      "host")/$( \
      _get \
        "target" \
        "device")/$( \
        _get \
          "target" \
          "network").cfg"
  echo \
    "${_conf}"
}

_set_overrides() {
  _set_override \
    "target" \
    "network" \
    "wifi"
  _set_override \
    "network" \
    "access" \
    "local"
  _set_override \
    "network" \
    "bandwidth" \
    "large"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an host address using various methods.
usage:
  $(_get "app" "name")
    [options]
    <command>
    <host>
    (<address>)
  commands:
     get                  Get address for an host
     set                  Set address for an host
  options:
     -b <bandwidth>       Specify desired bandwidth (large, low)
                          Default: '$(_get "network" "bandwidth")'
     -a <access>          Access for address discovery (local, remote)
                          Default: '$(_get "network" "access")'
     -n <network>         Explicitly specify network type (wifi,
                          bluetooth, tor)
                          Default: '$(_get "target" "network")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _resolve_date
  TZ=UTC \
    printf \
      -v _resolve_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "_resolve" "date")"
  _msg_info "              Target host:   $(_get "target" "host")"
  _msg_info "                  Network:   $(_get "target" "network")"
  _msg_info "                Bandwidth:   $(_get "network" "bandwidth")"
  _msg_info "                   Access:   $(_get "network" "access")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'b:a:n:cvh?' \
    arg; do
  case \
    "${arg}" in
    b) override_network_bandwidth="${OPTARG}" ;;
    a) override_network_access="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 2 )) && \
  _msg_error \
    "no command given" \
    0 && \
  _set_overrides && \
  _usage \
    1
(( $# < 2 )) && \
  _msg_error \
    "no host given" \
    0 && \
  _set_overrides && \
  _usage \
    1
_set \
  "target" \
  "command" \
  "${1}"
_set \
  "target" \
  "host" \
  "${2}"
(( $# == 3 )) && \
_set \
  "target" \
  "address" \
  "${3}"
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
_resolver \
  "$( \
    _get \
      "target" \
      "command")" \
  "$( \
    _get \
      "target" \
      "host")" \
  "$( \
    _get \
      "network" \
      "bandwidth")" \
   "$( \
    _get \
      "network" \
      "access")" \
 "$( \
    _get \
      "target" \
      "network")"

# vim:set sw=2 sts=-1 et:
