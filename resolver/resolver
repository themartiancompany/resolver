#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_host=""
  connection_bandwidth=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "ifconfig"
  _check_cmd \
    "route"
  _check_cmd \
    "iwgetid" \
    "wireless-tools"
  [[ "${TERMUX_VERSION}" != "" ]] && \
    _check_cmd \
      "termux-wifi-connectioninfo" \
      "termux-api"
  _check_cmd \
    "hostnamectl"
  # Check optional switch
  # in _check_cmd
  # _check_cmd \
  #   "sudo"
}

_termux_get_network_ssid() {
  termux-wifi-connectioninfo | \
    jq \
      -r \
      '.ssid'
}

_termux_get_network_bssid() {
  termux-wifi-connectioninfo | \
    jq \
      -r \
      '.bssid'
}

_get_network_ssid() {
  local \
    _ssid \
  _ssid="$( \
    iwgetid \
      -r)"
  if [[ "${_ssid}" == "" ]]; then
    [[ "${TERMUX_VERSION}" != "" ]] && \
      _ssid="$( \
        _termux_get_network_ssid)"
  fi
  echo \
    "${_ssid}"
}

_get_network_bssid() {
  local \
    _bssid \
  _bssid="$( \
    iwgetid \
      -ar)"
  if [[ "${_bssid}" == "" ]]; then
    [[ "${TERMUX_VERSION}" != "" ]] && \
      _bssid="$( \
        _termux_get_network_bssid)"
  fi
  echo \
    "${_bssid}"
}

_get_network() {
  local \
    _bssid \
    _i
  _bssid="$( \
    _get_network_bssid)"
  _bssid="${_bssid%:*}"
  _bssid="${_bssid%:*}"
  _bssid="${_bssid%:*}"
  echo \
    "$(_get_network_ssid)_${_bssid}"
}

_ifconfig() {
  local \
    _out="" \
    _nonetdev=() \
    _msg=()
  _nonetdev=(
    "Warning: cannot open /proc/net/dev"
    "(Permission denied). Limited output."
  )
  _stderr="$( \
    ifconfig \
      -a 2>&1)"
  _out="$( \
    ifconfig \
      -a 2>&1)"
  if [[ "${_stderr}" == *"${_nonetdev[*]}"* ]]; then
    _out="$( \
      echo \
        "${_out}" | \
        tail \
          -n \
            +2)"
  fi
  echo \
    "${_out}"
}

_wifi_device() {
  iw
}

_device_exists() {
  local \
    _device="${1}" \
    _exists
  _exists="$( \
    _ifconfig | \
      grep \
        "${_device}")"
  if [[ "${_exists}" == "" ]]; then
    _msg_error \
      "No device '${_device}' detected" \
      1
  fi
}

_hotspot_resolver() {
  local \
    _command="${1}" \
    _args=()
  if [[ "${_command}" == "get" ]]; then
    _args=(
      "$( \
        _get \
          "target" \
          "host")"
      "$( \
        _get \
          "target" \
          "device")"
      "$( \
        _get \
          "target" \
          "network")"
      "$( \
        _get \
          "target" \
          "gateway")"
      )
  elif [[ "${_command}" == "set" ]]; then
    _args=(
      "$( \
        _get \
          "target" \
          "host")"
      "$( \
        _get \
          "target" \
          "device")"
      "$( \
        _get \
          "target" \
          "address")"
    )
  fi
  "_${_command}_host_address" \
    "${_args[@]}"
}

_set_host_address() {
  local \
    _host="${1}" \
    _device="${2}" \
    _address="${3}"
  _msg_info \
    "Setting address ${_address} for ${_host}"
  _make_conf \
    "$(_get_conf_path)" \
    "${_host}" \
    "${_device}" \
    "${_address}" \
    "false"
}

# Local network resolver
# $1: hostname of the device to connect
# $2: network device name
# $3: network essid
_get_host_address() {
  local \
    _host="${1}" \
    _device="${2}" \
    _network="${3}" \
    _gateway="${4}" \
    _msg=() \
    _target \
    _cfg \
    _subnet
  _device_exists \
    "${_device}"
  if [[ "${_gateway}" == "y" ]]; then
    _target="$( \
      _get_gateway \
        "${_device}")"
  elif [[ "${_gateway}" == "n" ]]; then
    _subnet="$( \
      _get_subnet \
        "${_device}")"
    _cfg="$( \
      _get_conf \
        "${_host}" \
        "${_device}")"
    _target="${_subnet}.${_cfg}"
    if [[ "${_cfg}" == "gateway" ]]; then
      _target="$( \
        _get_gateway \
          "${_device}")"
    fi
  fi
  echo \
    "${_target}"
}

_get_gateway_route() {
  local \
    _device="${1}" \
    _gateway
  _gateway="$( \
    _route | \
      grep \
        "${_device}" | \
        awk \
          '{print $2}')"
  echo \
    "${_gateway}"
}

_get_gateway_iproute() {
  local \
    _device="${1}" \
    _gateway
  _gateway="$( \
    _iproute | \
      awk \
        '{print $3}')"
  echo \
    "${_gateway}"
}

_get_gateway() {
  local \
    _device="${1}" \
    _gateway_route \
    _gateway_iproute
  _gateway_route="$( \
    _get_gateway_route \
      "${_device}")"
  _gateway_iproute="$( \
    _get_gateway_iproute \
      "${_device}")"
  if [[ "${_gateway_iproute}" != \
        "${_gateway_route}" ]]; then
    _msg=(
      "Mismatch between 'ip route' (${_gateway_iproute})"
      "and 'route' (${_gateway_route:-None}) outputs."
      "Cannot confirm gateway."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  if [[ "${_gateway_iproute}" == "" ]]; then
    _msg=(
      "${_device} is not connected"
      "to a network.") && \
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  echo \
    "${_gateway_iproute}"
}

# Get subnet from IPv4 address
# $1: address
_get_subnet_ifconfig() {
  local \
    _device="${1}" \
    _address
  _address="$( \
    _get_device_address \
      "${_device}")"
  echo \
    "${_address%.*}"
}

_iproute() {
  local \
    _no_ip=() \
    _ip_opts=() \
    _ip \
    _out
  _ip_opts=(
    route
      list
        match
          0 
        table 
          all
        scope
          global
  )
  _no_ip=(
    "Cannot bind netlink socket:"
    "Permission denied"
  )
  _out="$( \
    ip \
      "${_ip_opts[@]}" \
      2>&1)"
  [[  "${_out}" == \
      *"${_no_ip[*]}"* ]] && \
  _out="$( \
    sudo \
      ip \
        "${_ip_opts[@]}" \
      2>&1)"
  echo \
    "${_out}"
}


_route() {
  local \
    _no_route=() \
    _out
  _no_route=(
    "INET (IPv4) not configured"
    "in this system.")
  _out="$( \
    route \
      2>&1)"
  [[  "${_out}" == \
      *"${_no_route[*]}"* ]] && \
  _out="$( \
    sudo \
      route)"
  echo \
    "${_out}"
}

_get_subnet_route() {
  local \
    _device="${1}" \
    _subnet
  _subnet="$( \
    _route | \
      grep \
        "${_device}" | 
        awk \
          '{print $1}')"
  echo \
    "${_subnet%.*}"
}

# Get subnet for a device
# $1: device
_get_subnet() {
  local \
    _device="${1}" \
    _subnet_ifconfig \
    _subnet_route
  _subnet_ifconfig="$( \
    _get_subnet_ifconfig \
      "${_device}")"
  _subnet_route="$( \
    _get_subnet_route \
      "${_device}")"
  if [[ "${_subnet_ifconfig}" != \
        "${_subnet_route}" ]]; then
    _msg=(
      "Mismatch between 'ifconfig' (${_subnet_ifconfig})"
      "and 'route' (${_subnet_route:-None}) outputs."
      "Cannot confirm subnet."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  if [[ "${_subnet_ifconfig}" == "" ]]; then
    _msg=(
      "${_device} is not connected"
      "to a network.") && \
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  echo \
    "${_subnet_ifconfig}"
}

_get_device_address() {
  local \
    _device="${1}" \
    _msg=() \
    _address \
    _line
  _line="$( \
    _ifconfig | \
      grep \
        -Pn \
        "${_device}" | \
        cut \
          -d":" \
          -f 1)"
  _line=$(( \
    _line + 1 ))
  _address="$( \
    _ifconfig | \
      sed \
        -n \
          "${_line}p;" | \
        awk \
          '{print $2}')"
  [[ "${_address}" == "" ]] && \
    _msg=(
      "${_device} has no address"
      "on a network.") && \
    _msg_error \
      "${_msg[*]}" \
      1
  echo \
    "${_address}"
}

_hostname_detect() {
  if [[ "$(command \
             -v \
             "hostnamectl")" != "" ]]; then
    hostnamectl \
      hostname
  fi
}

_make_conf() {
  local \
    _conf="${1}" \
    _host="${2}" \
    _device="${3}" \
    _address="${4}" \
    _new="${5}"
  mkdir \
    -p \
    "$(dirname \
         "${_conf}")"
  if [[ "${_new}" == true ]]; then
    echo \
      "# values go from 2 to 254" >> \
      "${_conf}"
    echo \
      "# device=111" >> \
      "${_conf}"
  fi
  if [[ "${_host}" == "" ]]; then
    _host="$(_hostname_detect)"
  fi
  if [[ "${_host}" == "" ]]; then
    _input \
    "_host" \
    "enter name for this host"
  fi
  [[ "${_address}" == "" ]] && \
  [[ "${_new}" != "true" ]] && \
    _input \
    "_address" \
    "enter address for target host (empty for self)"
  [[ "${_address}" == "" ]] && \
  _address="$( \
    _get_device_address \
      "${_device}")"
  echo \
    "${_host}=${_address##*.}" >> \
    "${_conf}"
}

_is_conf_empty() {
  local \
    _conf="${1}" \
    _cfg
  _cfg="$( \
    _comments_remove_get_assign \
      "$( \
        cat \
          "${_conf}")")"
  if [[ "${_cfg}" == '' ]]; then
    _msg_error \
      "empty configuration file!" \
      1
  fi
}

_check_conf_permissions() {
  local \
    _conf="${1}" \
    _perm
  _perm="$( \
    stat \
      -c '%a' \
      "${_conf}")"
  if [[ "${_perm}" != "600" ]]; then
    chmod \
      600 \
      "${_conf}"
  fi
}

_get_conf() {
  local \
    _host="${1}" \
    _device="${2}" \
    _conf \
    _cfg \
    _msg=()
  _conf="$(_get_conf_path)"
  if [ ! -e  "${_conf}" ]; then
    _make_conf \
      "${_conf}" \
      "${_host}" \
      "${_device}" \
      "" \
      "true"
  fi
  _check_conf_permissions \
    "${_conf}"
  _is_conf_empty \
    "${_conf}"
  _cfg="$( \
    _read_setting \
      "${_conf}" \
      "${_host}")"
  if [[ "${_cfg}" == "" ]]; then
    _msg_error \
      "No address configured for ${_host}" \
      1
    _make_conf \
      "${_conf}" \
      "${_host}" \
      "${_device}" \
      "" \
      "false"
    _cfg="$( \
      _read_setting \
        "${_conf}" \
        "${_host}")"
  fi
  echo \
    "${_cfg}"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "target" \
      "host")/$( \
      _get \
        "target" \
        "device")/$( \
        _get \
          "target" \
          "network").cfg"
  echo \
    "${_conf}"
}

_comments_remove_get_assign() {
  local \
    _text="${1}"
  echo \
    "${_text}" | \
    sed \
      -e "/# */d" | \
      grep \
        "="
}

_set_overrides() {
  _set_override \
    "target" \
    "network" \
    "$(_get_network)"
  _set_override \
    "target" \
    "device" \
    "wlan0"
  _set_override \
    "target" \
    "gateway" \
    "n"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an host address for given network on a given network device
usage:
  $(_get "app" "name")
    [options]
    <command>
    <host>
    (<address>)
  commands:
     get                  Get address for an host
     set                  Set address for an host
  options:
     -d <device>          Specify network device
                          Default: '$(_get "target" "device")'
     -n <ssid_bsid>       Specify wireless network ssid
                          Default: '$(_get "target" "network")'
     -g                   Specify host is the gateway

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _resolve_date
  TZ=UTC \
    printf \
      -v _resolve_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "_resolve" "date")"
  _msg_info "              Target host:   $(_get "target" "host")"
  _msg_info "                   Device:   $(_get "target" "device")"
  _msg_info "                  Network:   $(_get "target" "network")"
  _msg_info "                  Gateway:   $(_get "target" "gateway")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'd:n:gcvh?' \
    arg; do
  case \
    "${arg}" in
    d) override_target_device="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    g) override_target_gateway="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 2 )) && \
  _msg_error \
    "no command given" \
    0 && \
  _set_overrides && \
  _usage \
    1
(( $# < 2 )) && \
  _msg_error \
    "no host given" \
    0 && \
  _set_overrides && \
  _usage \
    1
_set \
  "target" \
  "command" \
  "${1}"
_set \
  "target" \
  "host" \
  "${2}"
(( $# == 3 )) && \
_set \
  "target" \
  "address" \
  "${3}"
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
[[ "$(_get \
        "target" \
        "device")" == "" ]] && \
  _msg_error \
    "-d option is required" \
    0 && \
  _usage \
    1
_show_config
_hotspot_resolver \
  "$( \
    _get \
      "target" \
      "command")"

# vim:set sw=2 sts=-1 et:
